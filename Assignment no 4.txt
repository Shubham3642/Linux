Assignment 1: Ensure the script checks if a specific file (e.g., myfile.txt) exists in the current directory. If it exists, print "File exists", otherwise print "File not found".
Assignment 2: Write a script that reads numbers from the user until they enter '0'. The script should also print whether each number is odd or even.
Assignment 3: Create a function that takes a filename as an argument and prints the number of lines in the file. Call this function from your script with different filenames.
Assignment 4: Write a script that creates a directory named TestDir and inside it, creates ten files named File1.txt, File2.txt, ... File10.txt. Each file should contain its filename as its content (e.g., File1.txt contains "File1.txt").
Assignment 5: Modify the script to handle errors, such as the directory already existing or lacking permissions to create files.
Add a debugging mode that prints additional information when enabled.
Assignment 6: Given a sample log file, write a script using grep to extract all lines containing "ERROR". Use awk to print the date, time, and error message of each extracted line.
Data Processing wit
Assignment 7 : Write a script to change the permission of the group to RWX for all the file in the current director starting with T
Assignment 8 : Write a program to make the other users readonly for all the file in the director whose path will be provided by the user .
Assignment 9 : Countdown Timer: Write a script that uses a while loop to countdown from 10 to 1, printing each number on a new line, and then displays "Boom!" when the countdown reaches zero.
Assignment 10 : User Input Validation: Create a script that prompts the user to enter a positive number. Use a while loop to continuously prompt the user until a positive number is entered.
Assignment 11 : File Processing: Write a script that reads each line from a file named data.txt and displays each line preceded by a line number, using a while loop.
Assignment 12 : Directory Traversal: Create a script that traverses through all files in a directory and its subdirectories, displaying the name and size of each file.
Assignment 13 : Menu System: Implement a simple menu system using a while loop, where the user can select options such as "Add", "Delete", "View", and "Exit". The loop should continue until the user chooses to exit.
Assignment 14 : Password Validation: Write a script that prompts the user to enter a password. Use a while loop to repeatedly prompt the user until a valid password (e.g., at least 8 characters with a mix of letters, numbers, and special characters) is entered.
Assignment 15 : Process Monitoring: Create a script that continuously monitors a specific process (identified by its name or PID) using a while loop. Display a message if the process stops running.
Assignment 16 : Downloading Files Write a script that downloads multiple files from a list of URLs stored in a file named urls.txt. Use a while loop to read each URL from the file and download the corresponding file using wget or curl.
Assignment 17 : Input File Existence Check: Implement a script that prompts the user to enter the name of a file. Use a while loop to check if the file exists in the current directory. If the file does not exist, prompt the user to enter the filename again.
Assignment 18 : Backup Script: Create a backup script that continuously monitors a directory for changes using a while loop. Whenever a new file is added to the directory, the script should automatically create a backup of that file in a separate directory.






